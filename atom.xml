<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simon-s-house</title>
  <subtitle>世界那么大，我想带你去看看</subtitle>
  <link href="/Simon-s-house/atom.xml" rel="self"/>
  
  <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/"/>
  <updated>2017-10-23T02:23:07.803Z</updated>
  <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/</id>
  
  <author>
    <name>Simon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux换键</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/10/23/linux%E6%8D%A2%E9%94%AE/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/10/23/linux换键/</id>
    <published>2017-10-23T00:00:29.000Z</published>
    <updated>2017-10-23T02:23:07.803Z</updated>
    
    <content type="html"><![CDATA[<h3 id="xmodmap原理及使用指南"><a href="#xmodmap原理及使用指南" class="headerlink" title="xmodmap原理及使用指南"></a>xmodmap原理及使用指南</h3><h4 id="1-什么是xmodmap"><a href="#1-什么是xmodmap" class="headerlink" title="1.什么是xmodmap"></a>1.什么是xmodmap</h4><p>xmodmap 是一个在 X 图形环境下用于修改键盘和鼠标按钮映射的工具。比如你可以使用它来实现鼠标的左右键互换，把 caps lock 键改成 ctrl 键， a 键改成 b 键等。</p>
<p>在介绍 xmodmap 的使用方法之前，先介绍一下系统是如何处理键盘的输入的。</p>
<ul>
<li>键盘中的一个按键被按下时，会产生一个“信号”传给操作系统。</li>
<li>操作系统得到这个信号之后，检查此信号对应的处理方法。</li>
<li>执行对应的处理方法。</li>
<li><a id="more"></a>
</li>
</ul>
<p>上面的流程当中，键盘某键产生的信号是不可变的，就是我们后面会提到的 keycode 是不会变的。你按不同的键，实际上可以看成是传入了不同的 keycode ，至于这些 keycode 要做什么事那是后话。也就是说，你按下了键盘上的 a 键与是否输入了一个 a ，它们之间是没有必然联系的。同时，那些操作系统当中对不同信号设置的处理方法也是没法直接改变的。而唯一可以改变的，就是它们之间的映射关系。这也是 xmodmap 它要做的事。</p>
<p>第二步，操作系统得到键盘输入的信号之后，就去检查对应的处理方法。这个处理方法已经预置了一套，比如键盘的上 a 键产生的 keycode 对应的处理方法就是输入一个 a 。我们也可以根据自己的需求，把 a 产生的 keycode 让它对应到另外一个处理方法上去，比如输入的是一个 b 。</p>
<p>我们可以使用 xev 这个工具来获取不同按钮产生的 keycode ，比如 a 这个按钮产生的 keycode 是 28， <code>tab</code> 键产生的 keycode 是 23。</p>
<h4 id="2-改变按键的行为"><a href="#2-改变按键的行为" class="headerlink" title="2.改变按键的行为"></a>2.改变按键的行为</h4><p>我们先看普通键的行为如何被更改。之前后再介绍修饰键，比如 <code>ctrl</code> 键的行为如何修改。</p>
<p>假如我们希望得到的一个效果是，按下 a 按键，但是却是输入一个 b。</p>
<p>根据前面的介绍，我们要做的事，只是把 a 按键对应的处理方法，改成和 b 按键的一样就可以了。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">xmodmap</span> -e <span class="string">'keycode 38 = b'</span></div></pre></td></tr></table></figure>
<p>xmodmbp 使用 -e 参数后面跟一个表达式来实现相应的修改。</p>
<p>keycode 的作用是将一个按键与一串处理方法绑定，是一串方法，不是一个，即：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">xmodmap</span> -e <span class="string">'keycode 38 = b E'</span></div></pre></td></tr></table></figure>
<p>像这样一样，以空格分割，写多个处理方法。根据文档，你最多可以写8个处理方法，但是，一般只有前4个为可用的，第2个指定的是按住 <code>shift</code> 键时如何处理（第3个和第4个说的修饰键没接触过）。上面的代码的效果就是，直接按 a 键会输入一个 b ，按住 shift 键再按 a 键就是输入一个 E，大写的。</p>
<p>上面写的 b E 是两个处理方法，实际上，处理方法都是以整数表示的，在 xev 的输出中也可以看到， b 对应的是 0x62 ，而 E 对应的是 0x45 ，所以，上面的代码也可以写成：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmodmap -e 'keycode <span class="number">38</span> = <span class="number">0x62</span> <span class="number">0x45</span>'</div></pre></td></tr></table></figure>
<p>完整的处理方法数值列表，可以在 X11/keysymdef.h 这个文件中找到。</p>
<p>另外一种修改按键行为的方法是使用 keysym 来转换预定义的处理方法。比如把 0x62 这个处理方法转换成 0x63 ：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmodmap -e 'keysym <span class="number">0x62</span> = <span class="number">0x63</span>'</div></pre></td></tr></table></figure>
<p>这段代码与下面等价：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">xmodmap</span> -e <span class="string">'keysym b = c'</span></div></pre></td></tr></table></figure>
<p>效果与下面的等价：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">xmodmap</span> -e <span class="string">'keycode 56 = c'</span></div></pre></td></tr></table></figure>
<h4 id="改变修饰键的行为"><a href="#改变修饰键的行为" class="headerlink" title="改变修饰键的行为"></a>改变修饰键的行为</h4><p>修饰键指的就是像 <code>ctrl</code> ， <code>alt</code> 等这些键。一般是按住它们再去按其它键以产生不同的效果。前面也提到，绑定到某个按键的处理方法是一串，而不是一个。针对修饰键的处理，也是一个绑定的过程。具体一点，就是把一些处理方法绑定到特定的装饰方法当中。比如把左边那个 <code>ctrl</code> 键对应的 0xffe3 这个处理方法绑定到 <code>control</code> 这个装饰方法当中。当然，一个装饰方法中，可以有多个普通方法，左 <code>ctrl</code> 和右 <code>ctrl</code> 就是两个，你也可以添加你自己的。</p>
<p>我们先使用：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">xmodmap -pm</span></div></pre></td></tr></table></figure>
<p>来查看装饰方法的情况。比如我现在的是这样：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">shift       Shift_L (<span class="number">0x32</span>),  Shift_R (<span class="number">0x3e</span>)</div><div class="line">lock      </div><div class="line"><span class="section">control</span>     Control_L (<span class="number">0x25</span>),  Control_L (<span class="number">0x42</span>),  Control_R (<span class="number">0x69</span>)</div><div class="line">mod1        Alt_L (<span class="number">0x40</span>),  Alt_R (<span class="number">0x6c</span>),  Meta_L (<span class="number">0xcd</span>)</div><div class="line">mod2        Num_Lock (<span class="number">0x4d</span>)</div><div class="line">mod3      </div><div class="line">mod4        Super_L (<span class="number">0x85</span>),  Super_R (<span class="number">0x86</span>),  Super_L (<span class="number">0xce</span>),  Hyper_L (<span class="number">0xcf</span>)</div><div class="line">mod5        ISO_Level3_Shift (<span class="number">0x5c</span>),  Mode_switch (<span class="number">0xcb</span>)</div></pre></td></tr></table></figure>
<p>可以看到，系统定义了 <code>shift</code>, <code>lock</code>, <code>control</code>, <code>mod1</code>, <code>mod2</code>, <code>mod3</code>, <code>mod4</code>, <code>mod5</code> 这8种装饰方法。 <code>shift</code> 一般对应 Shift <code>键，lock</code> 对应 caps lock键，我已经把它干掉了。<code>control</code> 对应左右的 ctrl 键， <code>mod1</code> 就是 alt 键了。通过 xev 程序，我得到我键盘上的那个 win 键对应的处理方法是 <code>mod4</code> 中的 Super_L 。</p>
<p>上面右键的处理方法后面括号中的数字，是表示的 keycode ，因为相同的处理方法可能是由不同的按键，即不同的 keycode 产生出来的。</p>
<p>要修改装饰键的行为，一般分成两步：</p>
<ol>
<li>将一个按键的处理方法改成已有几种特殊方法，像 Control_L 这些。（这步不是必须的，但是如果你把一个像 a 这种处理方法绑定到修饰方法上，会出问题，后面会尝试）</li>
<li>把一种处理方法绑定到修饰方法上。</li>
</ol>
<p>我们以 <code>shift</code> 这个修饰为例来说明。把指定处理方法绑定到修饰方法上，使用 add 来添加一个修饰方法绑定，比如：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">xmodmap</span> -e <span class="string">'add shift = a'</span></div></pre></td></tr></table></figure>
<p>这样， a 这个处理方法就会被当成 <code>shift</code> 修饰方法来用了。而因为默认地， a 这个处理方法，是由产生 keycode 为38的 a 按键触发的，所以，现在，当你按住 a 键，再按其它键时，就会……，挂掉，嗯，不错，就会挂掉。我不知道为什么。不过别简单，我们可以把它从修饰方法中移除：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">xmodmap</span> -e <span class="string">'remove shift = a'</span></div></pre></td></tr></table></figure>
<p>这样就可以了。那我们拿键盘右侧的 menu 键来试试吧。从 xev 中可以获取到，右侧的这个“菜单键”，它的 keycode 是135，当前对应的处理方法是名为“Menu”的 0xff67 方法。那我们就把这个处理方法添加到 <code>shift</code> 修饰方法当中试试：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">xmodmap</span> -e <span class="string">'add shift = Menu'</span></div></pre></td></tr></table></figure>
<p>这样，当你按住“菜单键”时，就和按住左边的 Shift 键一样了，可以输入大写字母。当然，同时“菜单键”还有它原来的一些行为，比如会输入 $ 符号什么的。这也是为什么，我们如果要修改修饰键，那么最好使用已经定义的那几种专为修饰键预定的处理方法，以避免产生问题。</p>
<p>所以，如果我们要完全把“菜单键”改成一个左 Shift 键，那么应该按上面提到的两个步骤做，首先：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">xmodmap</span> -e <span class="string">'keycode 135 = Shift_L'</span></div></pre></td></tr></table></figure>
<p>把它的处理方法改成 Shift_L ，而不使用原来的 Menu 。</p>
<p>这时，可能有人会想，Shift_L 方法不是已经绑定到相应的 <code>shift</code> 这个装饰方法了嘛，那我们已经达到目的了？当然不是，绑定装饰方法的处理方法，是对应到具体的 keycode 的，左 Shift 键产生的 Shift_L 方法显然和我们刚才定义的菜单键产生的 Shift_L 方法是有区别的。我们刚才定义会产生的 Shift_L 方法还没有绑定到 <code>shift</code> 这个装饰方法上。所以，现在的表现为，菜单键已经不具有以前的行为了（比如弹出一个菜单什么的），但是，它还仍未拥有修饰键的作用，我们还需要绑定一下：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">xmodmap</span> -e <span class="string">'add shift = Shift_L'</span></div></pre></td></tr></table></figure>
<p>再次把所有的 Shift_L 处理方法都绑定到 <code>shift</code> 这个装饰方法上。现在使用：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">xmodmap -pm</span></div></pre></td></tr></table></figure>
<p>可以看到下面这一行：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">shift </span>      <span class="keyword">Shift_L </span>(<span class="number">0x32</span>),  <span class="keyword">Shift_R </span>(<span class="number">0x3e</span>),  <span class="keyword">Shift_L </span>(<span class="number">0x87</span>)</div></pre></td></tr></table></figure>
<p>0x87 就是 135 ，也就是我们刚才自己添加的那个“菜单键”，现在，这个菜单键就完全被改成一个左 Shift 键了。</p>
<p>如果你是修改 caps lock 键的行为，那么记得需要使用 remove 把之前的修饰绑定移除：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">xmodmap</span> -e <span class="string">'remove lock = xxx'</span></div></pre></td></tr></table></figure>
<h4 id="4-修改鼠标按键行为"><a href="#4-修改鼠标按键行为" class="headerlink" title="4.修改鼠标按键行为"></a>4.修改鼠标按键行为</h4><p>修改鼠标的按键行为就简单很多了，直接使用 pointer 顺序指定各个按键的处理方法。处理方法与默认的按键号是一致的，比如处理方法1，对应1号按键，处理方法2对应2号按键。（最多有12个按键绑定，我们下面只考虑前3个就好了）</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmodmap -e 'pointer = <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>'</div></pre></td></tr></table></figure>
<p>这样什么也不会发生，它就是默认的设置。如果要交换鼠标的左右键，只需要让1号按键（第一位）对应到3号处理方法，就3号按键（第三位）对应1号处理方法：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmodmap -e 'pointer = <span class="number">3</span> <span class="number">2</span> <span class="number">1</span>'</div></pre></td></tr></table></figure>
<p>这样就实现了左右键互换。</p>
<p>参考：<a href="http://blog.csdn.net/robertsong2004/article/details/36439597" target="_blank" rel="external">CSDN</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;xmodmap原理及使用指南&quot;&gt;&lt;a href=&quot;#xmodmap原理及使用指南&quot; class=&quot;headerlink&quot; title=&quot;xmodmap原理及使用指南&quot;&gt;&lt;/a&gt;xmodmap原理及使用指南&lt;/h3&gt;&lt;h4 id=&quot;1-什么是xmodmap&quot;&gt;&lt;a href=&quot;#1-什么是xmodmap&quot; class=&quot;headerlink&quot; title=&quot;1.什么是xmodmap&quot;&gt;&lt;/a&gt;1.什么是xmodmap&lt;/h4&gt;&lt;p&gt;xmodmap 是一个在 X 图形环境下用于修改键盘和鼠标按钮映射的工具。比如你可以使用它来实现鼠标的左右键互换，把 caps lock 键改成 ctrl 键， a 键改成 b 键等。&lt;/p&gt;
&lt;p&gt;在介绍 xmodmap 的使用方法之前，先介绍一下系统是如何处理键盘的输入的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;键盘中的一个按键被按下时，会产生一个“信号”传给操作系统。&lt;/li&gt;
&lt;li&gt;操作系统得到这个信号之后，检查此信号对应的处理方法。&lt;/li&gt;
&lt;li&gt;执行对应的处理方法。&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
    
      <category term="command" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/command/"/>
    
      <category term="linux" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>博客支持数学公式</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/10/19/%E5%8D%9A%E5%AE%A2%E6%94%AF%E6%8C%81%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/10/19/博客支持数学公式/</id>
    <published>2017-10-19T03:06:26.000Z</published>
    <updated>2017-10-19T09:03:22.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使博客支持数学公式渲染"><a href="#使博客支持数学公式渲染" class="headerlink" title="使博客支持数学公式渲染"></a>使博客支持数学公式渲染</h2><h3 id="一波三折"><a href="#一波三折" class="headerlink" title="一波三折"></a>一波三折</h3><h4 id="更换引擎"><a href="#更换引擎" class="headerlink" title="更换引擎"></a>更换引擎</h4><p>一开始直接看网上教程卸载原来的渲染引擎，安装新引擎</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">uninstall</span> hexo-renderer-marked <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span> hexo-renderer-pandoc <span class="comment">--save</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>也有的说安装下面这个引擎</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-renderer-kramed <span class="comment">--save</span></div></pre></td></tr></table></figure>
<p>还有的说要在博客根目录安装插件</p>
<h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo math <span class="keyword">install</span></div></pre></td></tr></table></figure>
<p>但是我安装失败了</p>
<p>然后又看到说要在主题配置文件开启</p>
<h4 id="主题配置文件开启"><a href="#主题配置文件开启" class="headerlink" title="主题配置文件开启"></a>主题配置文件开启</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># MathJax Support</span></div><div class="line"><span class="attr">mathjax:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  per_page:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<h4 id="行内公式匹配问题"><a href="#行内公式匹配问题" class="headerlink" title="行内公式匹配问题"></a>行内公式匹配问题</h4><p>有的还说mathjax渲染行内公式可能出错，</p>
<p>接下来到博客根目录下，找到node_modules\kramed\lib\rules\inline.js</p>
<p>把第11行的escape变量的值做相应的修改：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//  escape: /^\\([<span class="string">\\`*&#123;&#125;\[\</span>](<span class="link"></span>)#$+\-.!_&gt;])/,</div><div class="line">  escape: /^\\([<span class="string">`*\[\</span>](<span class="link"></span>)#$+\-.!_&gt;])/</div></pre></td></tr></table></figure>
<p>这一步是在原基础上取消了对\,{,}的转义(escape)。<br>同时把第20行的em变量也要做相应的修改。</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//  em: /^<span class="symbol">\b</span>_((?:__|[<span class="symbol">\s</span><span class="symbol">\S</span>])+?)_<span class="symbol">\b</span>|^<span class="symbol">\*</span>((?:<span class="symbol">\*</span><span class="symbol">\*</span>|[<span class="symbol">\s</span><span class="symbol">\S</span>])+?)<span class="symbol">\*</span>(?!<span class="symbol">\*</span>)/,</div><div class="line">  em: /^<span class="symbol">\*</span>((?:<span class="symbol">\*</span><span class="symbol">\*</span>|[<span class="symbol">\s</span><span class="symbol">\S</span>])+?)<span class="symbol">\*</span>(?!<span class="symbol">\*</span>)/</div></pre></td></tr></table></figure>
<h4 id="博客头声明开启"><a href="#博客头声明开启" class="headerlink" title="博客头声明开启"></a>博客头声明开启</h4><p>这样还不够，还需要在文章的Front-matter里打开mathjax开关，如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> <span class="string">index.html</span></div><div class="line"><span class="attr">date:</span> <span class="number">2016</span><span class="bullet">-12</span><span class="bullet">-28</span> <span class="number">21</span><span class="string">:01:30</span></div><div class="line"><span class="attr">tags:</span></div><div class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></div><div class="line"><span class="bullet">-</span><span class="bullet">-</span></div></pre></td></tr></table></figure>
<p>不要嫌麻烦，之所以要在文章头里设置开关，是因为考虑只有在用到公式的页面才加载 Mathjax，这样不需要渲染数学公式的页面的访问速度就不会受到影响了。</p>
<h4 id="查找问题"><a href="#查找问题" class="headerlink" title="查找问题"></a>查找问题</h4><h5 id="1-究竟用什么引擎渲染的？"><a href="#1-究竟用什么引擎渲染的？" class="headerlink" title="1.究竟用什么引擎渲染的？"></a>1.究竟用什么引擎渲染的？</h5><p><code>hexo -g</code> 的时候看到 <code>engine:mathjax</code> 所以引擎是对的</p>
<h5 id="2-究竟有渲染吗？"><a href="#2-究竟有渲染吗？" class="headerlink" title="2.究竟有渲染吗？"></a>2.究竟有渲染吗？</h5><p>博客生成之后 $$ 都被解释了，证明大概是有渲染的，但是里面的公式全都没有渲染出来，奇怪！</p>
<h5 id="2-和插件有关系吗"><a href="#2-和插件有关系吗" class="headerlink" title="2. 和插件有关系吗"></a>2. 和插件有关系吗</h5><figure class="highlight plain"><figcaption><span>math install</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo math install</div></pre></td></tr></table></figure>
<p>一直没有成功，所以想难道是插件没装成功，直接去github搜hexo-pugins/mathjax</p>
<p>在readme看到原来现在也不用上面那样<code>math install</code> 了，而且也支持一个好像叫什么<code>katex</code>的渲染引擎了 ，不过没关系，重点了来了，原来要在博客配置文件开启<code>math</code></p>
<p>所以在博客配置文件加上下面，大功告成</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="attr">math:</span></div><div class="line"><span class="attr">  engine:</span> <span class="string">'mathjax'</span> <span class="comment"># or 'katex'</span></div><div class="line"><span class="attr">  mathjax:</span></div><div class="line"><span class="attr">    src:</span> <span class="string">custom_mathjax_source</span></div><div class="line"><span class="attr">    config:</span></div><div class="line">      <span class="comment"># MathJax config</span></div><div class="line"><span class="attr">  katex:</span></div><div class="line"><span class="attr">    css:</span> <span class="string">custom_css_source</span></div><div class="line"><span class="attr">    js:</span> <span class="string">custom_js_source</span> <span class="comment"># not used</span></div><div class="line"><span class="attr">    config:</span></div><div class="line">      <span class="comment"># KaTeX config</span></div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>学点前端还是有用的，不然光靠看别人的经验贴，也不知道原理</li>
<li>为了防止看到过时的经验贴，最好先看原作者最新的说明文档readme </li>
<li>实在不行的时候，去国内外网站提问</li>
</ol>
<p><a href="https://github.com/hexojs/hexo-math">hexo-math</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使博客支持数学公式渲染&quot;&gt;&lt;a href=&quot;#使博客支持数学公式渲染&quot; class=&quot;headerlink&quot; title=&quot;使博客支持数学公式渲染&quot;&gt;&lt;/a&gt;使博客支持数学公式渲染&lt;/h2&gt;&lt;h3 id=&quot;一波三折&quot;&gt;&lt;a href=&quot;#一波三折&quot; class=&quot;headerlink&quot; title=&quot;一波三折&quot;&gt;&lt;/a&gt;一波三折&lt;/h3&gt;&lt;h4 id=&quot;更换引擎&quot;&gt;&lt;a href=&quot;#更换引擎&quot; class=&quot;headerlink&quot; title=&quot;更换引擎&quot;&gt;&lt;/a&gt;更换引擎&lt;/h4&gt;&lt;p&gt;一开始直接看网上教程卸载原来的渲染引擎，安装新引擎&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;uninstall&lt;/span&gt; hexo-renderer-marked &lt;span class=&quot;comment&quot;&gt;--save&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; hexo-renderer-pandoc &lt;span class=&quot;comment&quot;&gt;--save&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/blog/"/>
    
      <category term="hexo" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>感知机算法</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/10/18/%E6%84%9F%E7%9F%A5%E6%9C%BA%E7%AE%97%E6%B3%95/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/10/18/感知机算法/</id>
    <published>2017-10-18T09:10:06.000Z</published>
    <updated>2017-10-19T02:49:39.707Z</updated>
    
    <content type="html"><![CDATA[<h3 id="感知机算法-PLA-Proceptron-Learning-Algorithm"><a href="#感知机算法-PLA-Proceptron-Learning-Algorithm" class="headerlink" title="感知机算法-PLA-Proceptron Learning Algorithm"></a>感知机算法-PLA-Proceptron Learning Algorithm</h3><p>感知器作为人工神经网络中最基本的单元，有多个输入和一个输出组成。虽然我们的目的是学习很多神经单元互连的网络，但是我们还是需要先对单个的神经单元进行</p>
<p>sign ($w^t$*a) &gt; v</p>
<p>sign($w^t$*a) &gt; v</p>
<a id="more"></a>
<p>先得到n个输入，再将每个输入值加权，然后判断感知器输入的加权和最否达到某一阀值v，若达到，则通过sign函数输出1，否则输出-1。</p>
<p><img src="http://images0.cnblogs.com/blog2015/680781/201508/012141117983823.jpg" alt="img"></p>
<p>上面的公式可知，当权值向量w确定时，就可以利用感知器来做分类。</p>
<h4 id="特征向量和增广向量"><a href="#特征向量和增广向量" class="headerlink" title="特征向量和增广向量"></a>特征向量和增广向量</h4><p>假设数据a=[x1,x2],则对应的w=[w1,w2],记阈值（threshold)为v</p>
<p>假设w=[w1,w2]</p>
<p>我们的判别方式是sign ($w^t$*a) &gt; v</p>
<p>为了计算方便，我们不妨记增广向量$a^`$ =[x0,x1,x2]=[1,x1,x2] (x0恒为1，事实上x0是常数就ok)</p>
<p>则$w^`$ =[w0,w1,w2]</p>
<p>则$w^T$’*$a^`$  = w0x0+w1x1+w2x2 = w0+w1x1+w2x2 = w0 + $w^t$a</p>
<p>所以最终迭代得出的$w_0$就是我们得到的threshold,所以使用增广向量的方法可以把判断的步骤去掉,直接转化为向量运算,非常便于编程实现和计算机计算.</p>
<p>那么我们如何获得感知器的权值呢？这需要根据训练集是否可分来采用不同的方法：</p>
<p>1、训练集线性可分时 —&gt; 感知器训练法则</p>
<p>　　为了得到可接受的权值，通常从随机的权值开始，然后利用训练集反复训练权值，最后得到能够正确分类所有样例的权向量。</p>
<p>具体算法过程如下：</p>
<p>A）初始化权向量w=(w0,w1,…,wn)，将权向量的每个值赋一个随机值。</p>
<p>B）对于每个训练样例，首先计算其预测输出：</p>
<p>&lt;/code&gt;$lim_{x\to \infty} \ exp(-x)=0$</p>
<p>$lim_{x \to \infty} \ exp(-x)=0$</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;感知机算法-PLA-Proceptron-Learning-Algorithm&quot;&gt;&lt;a href=&quot;#感知机算法-PLA-Proceptron-Learning-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;感知机算法-PLA-Proceptron Learning Algorithm&quot;&gt;&lt;/a&gt;感知机算法-PLA-Proceptron Learning Algorithm&lt;/h3&gt;&lt;p&gt;感知器作为人工神经网络中最基本的单元，有多个输入和一个输出组成。虽然我们的目的是学习很多神经单元互连的网络，但是我们还是需要先对单个的神经单元进行&lt;/p&gt;
&lt;p&gt;sign ($w^t$*a) &amp;gt; v&lt;/p&gt;
&lt;p&gt;sign($w^t$*a) &amp;gt; v&lt;/p&gt;
    
    </summary>
    
    
      <category term="program" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/program/"/>
    
      <category term="machine learning" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/machine-learning/"/>
    
      <category term="ML" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>uppal</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/10/18/uppal/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/10/18/uppal/</id>
    <published>2017-10-18T00:05:50.000Z</published>
    <updated>2017-10-18T00:40:08.797Z</updated>
    
    <content type="html"><![CDATA[<h2 id="what’s-uppaal"><a href="#what’s-uppaal" class="headerlink" title="what’s uppaal"></a>what’s uppaal</h2><h3 id="uppaal简述"><a href="#uppaal简述" class="headerlink" title="uppaal简述"></a>uppaal简述</h3><p>感觉上uppaal最主要有两个功能，一个是实现automata的可视化（xml）<br>第二个是模拟器可以用来验证模型性质</p>
<a id="more"></a>
<h3 id="uppaal使用"><a href="#uppaal使用" class="headerlink" title="uppaal使用"></a>uppaal使用</h3><img src="/Simon-s-house/2017/10/18/uppal/1.png" alt="1.png" title="">
<p>如上图，uppaal实际上在我看来是面向对象的，上图是一个：人插卡取钱、ATM吐钱（卡）、银行验证余额是否能取钱  的模型，所以我们就要实现三个进程，这三个进程通过变量和同步信号互相沟通</p>
<h4 id="location的属性"><a href="#location的属性" class="headerlink" title="location的属性"></a>location的属性</h4><ol>
<li>是否initial</li>
</ol>
<h4 id="transition的属性"><a href="#transition的属性" class="headerlink" title="transition的属性"></a>transition的属性</h4>
<ol>
<li>select：选择变量，指定当变量来自某个范围的时候才接受</li>
<li>guard：走这条边必须满足的条件</li>
<li>sync： 同步信号，<ol>
<li>sync_id?:问号结束的话，表示经过这条边，会发出这个同步信号</li>
<li>sync_id!:感叹号的话，表示当另一个模型发出这个同步信号，当前模型就会收到信号，走这条边</li>
</ol>
</li>
<li>update：经过这条边时，变量进行更新</li>
</ol>
<h4 id="变量域"><a href="#变量域" class="headerlink" title="变量域"></a>变量域</h4><p>整个模型文件有不同的进程，不同进程有自己的变量，也有全局变量，其它进程不能访问到自己的变量<br><img src="/Simon-s-house/2017/10/18/uppal/3.png" alt="3.png" title=""></p>
<ol>
<li>同步信号在全局声明</li>
<li>局使用的变量应该全局声明</li>
<li>每个进程都可以有自己的初始化变量，在全局文件创建的时候赋值<code>p=process(1)</code></li>
</ol>
<h4 id="模型设计"><a href="#模型设计" class="headerlink" title="模型设计"></a>模型设计</h4><ol>
<li>每个transition必须是atomic的（防止context switch）的时候出现错误</li>
<li>每个进程都要有initial state</li>
<li>为了防止模型死锁，每个进程都要有循环（回到initial state）</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;what’s-uppaal&quot;&gt;&lt;a href=&quot;#what’s-uppaal&quot; class=&quot;headerlink&quot; title=&quot;what’s uppaal&quot;&gt;&lt;/a&gt;what’s uppaal&lt;/h2&gt;&lt;h3 id=&quot;uppaal简述&quot;&gt;&lt;a href=&quot;#uppaal简述&quot; class=&quot;headerlink&quot; title=&quot;uppaal简述&quot;&gt;&lt;/a&gt;uppaal简述&lt;/h3&gt;&lt;p&gt;感觉上uppaal最主要有两个功能，一个是实现automata的可视化（xml）&lt;br&gt;第二个是模拟器可以用来验证模型性质&lt;/p&gt;
    
    </summary>
    
    
      <category term="program" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/program/"/>
    
      <category term="uppaal" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/uppaal/"/>
    
      <category term="realtime-system" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/realtime-system/"/>
    
  </entry>
  
  <entry>
    <title>github基础操作</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/10/17/github%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/10/17/github基础操作/</id>
    <published>2017-10-16T16:58:00.000Z</published>
    <updated>2017-10-17T01:41:00.497Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SSH基础知识"><a href="#SSH基础知识" class="headerlink" title="SSH基础知识"></a>SSH基础知识</h3><blockquote>
<p>简单说，SSH是一种网络协议，用于计算机之间的加密登录。<br>如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。<br>最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。<br>需要指出的是，SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是OpenSSH，它是自由软件，应用非常广泛。<br>　　对于github而言，ssh-key主要是用来确保当前IP（host）是否有权限对远程仓库进行操作，无论是push还是pull。</p>
</blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="external">ssh入门贴</a></p>
<a id="more"></a>
<h4 id="ssh-key管理"><a href="#ssh-key管理" class="headerlink" title="ssh-key管理"></a>ssh-key管理</h4><p>如果我们想用多台电脑来对同一个库进行操作，就应该在不同电脑上生成不同的ssh—key添加到库里面去。</p>
<h4 id="ssh相关命令"><a href="#ssh相关命令" class="headerlink" title="ssh相关命令"></a>ssh相关命令</h4><p>生成ssh-key命令<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"你的邮箱"</span></div></pre></td></tr></table></figure></p>
<p>这时候会弹出来<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter <span class="built_in">file</span> <span class="keyword">in</span> which <span class="keyword">the</span> key <span class="keyword">is</span> (/home/simon/.ssh/id_rsa):</div><div class="line">你想新建的文件名</div></pre></td></tr></table></figure></p>
<p>如果之前没有生成过ssh-key，按回车就好，ssh-key就在这个目录<br>如果之前已经生成过，而且不想覆盖，就输入文件名，它会在这个目录创建你输入的文件，然后把新的ssh-key存进去，像下面<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">-home</span></div><div class="line">  -<span class="ruby">-Simon</span></div><div class="line">    -<span class="ruby">-.ssh</span></div><div class="line">      -<span class="ruby">-第一个ssh-key</span></div><div class="line">      -<span class="ruby">-你输入的文件名</span></div><div class="line">        -<span class="ruby">-第二个ssh-key</span></div></pre></td></tr></table></figure></p>
<p>对了，所有的ssh-key文件名都是<br><code>id_rsa.pub</code><br>忘记ssh-key在哪里的时候’ssh-keygen’ 就可以看到目录了，但是不要重新新建一个哦！</p>
<p><code>ssh -T url</code>测试ssh是否连通了</p>
<h4 id="ssh-key和github的deploy-key的绑定"><a href="#ssh-key和github的deploy-key的绑定" class="headerlink" title="ssh-key和github的deploy key的绑定"></a>ssh-key和github的deploy key的绑定</h4><p>原来github的deploy_key分账号的deploy-key和库的deploy-key，为了方便，当然是直接设置账号deploy-key啊，这样对每个库都有权限，而且每个本地的ssh-key只能绑定一次（无论是库还是账号）。<br>这里有个大坑，虽然账号的deploy-key已经绑定了本地的ssh-key，但是手残把多新建一个ssh-key然后绑定了一个库，然后之后所有其它库都需要另外的ssh-key才能使用ssh协议，但是这样贼麻烦，弄了好久，发现只要把所有库的deploy-key都去掉就行，反正现在没有多人协同开发，不管了。</p>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><h4 id="连接远程库"><a href="#连接远程库" class="headerlink" title="连接远程库"></a>连接远程库</h4><p><code>git remote add 自定义id 库的url</code><br>上面的名字你随意写，库的url可以是https或者ssh格式，但是ssh格式，需要你添加ssh-key</p>
<p><code>git remote -v</code>查看已经绑定的远程库<br><code>git remote rename old_id new_id</code> 重命名远程库<br><code>git remote remove id</code>解除连接远程库</p>
<h4 id="branch操作"><a href="#branch操作" class="headerlink" title="branch操作"></a>branch操作</h4><p>如果是克隆下来的库，有master分支，没问题<br>如果是init的库本地库，一开始没有master分支，需要先add文件（夹），自动生成master分支之后才可以新建分支<br><code>git branch</code>查看本地分支<br><code>git branch id</code>新建本地分支<br><code>git checkout branc_id</code>切换本地分支，尤其是当你要add file的时候，记住先切换到你想要的分支<br><img src="/Simon-s-house/2017/10/17/github基础操作/1.png" alt="1.png" title=""><br>上图就是切换branch后的效果，当前branch会高亮</p>
<h4 id="push操作"><a href="#push操作" class="headerlink" title="push操作"></a>push操作</h4><p><code>git push repo_id local_branch:remote_branch</code><br>repo_id是你自定义的库id<br>把remote_branch没有的话会自动新建<br>本地的branch其实就是不同文件夹</p>
<h4 id="pull操作"><a href="#pull操作" class="headerlink" title="pull操作"></a>pull操作</h4><p><code>git pull repo_id remote_bracn</code><br>可以把repo_id对应分支pull下来，已经pull过的会自动更新</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SSH基础知识&quot;&gt;&lt;a href=&quot;#SSH基础知识&quot; class=&quot;headerlink&quot; title=&quot;SSH基础知识&quot;&gt;&lt;/a&gt;SSH基础知识&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;简单说，SSH是一种网络协议，用于计算机之间的加密登录。&lt;br&gt;如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。&lt;br&gt;最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。&lt;br&gt;需要指出的是，SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是OpenSSH，它是自由软件，应用非常广泛。&lt;br&gt;　　对于github而言，ssh-key主要是用来确保当前IP（host）是否有权限对远程仓库进行操作，无论是push还是pull。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html&quot;&gt;ssh入门贴&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="program" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/program/"/>
    
      <category term="github" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/github/"/>
    
      <category term="command" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>代码高亮</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/10/14/%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/10/14/代码高亮/</id>
    <published>2017-10-14T08:20:02.000Z</published>
    <updated>2017-10-14T18:32:21.988Z</updated>
    
    <content type="html"><![CDATA[<p>总结<br>blog目录下config<br><figure class="highlight yml"><figcaption><span>config配置</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">highlight:</span></div><div class="line"><span class="attr">    on:</span> <span class="literal">true</span></div></pre></td></tr></table></figure><br>打开hexo默认高亮，则自定义高亮没用</p>
<p>但是关闭之后始终使用不了spfk主题的高亮设置，遂放弃，有空再搞<br><a id="more"></a><br>奇怪，发现在md文件里用六个点框住yml代码，hexo会误以为是配置，报错，一定要codeblock<br><figure class="highlight yml"><figcaption><span>config配置</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">highlight:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>下面是codeblock写法</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a[<span class="number">20</span>][<span class="number">20</span>];</div></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;%codeblock lang:c%&#125;</div><div class="line">int a[<span class="string">20</span>][<span class="symbol">20</span>];</div><div class="line">&#123;%endcodeblock%&#125;</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d = dict()</div><div class="line">a = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</div><div class="line">a.append(<span class="number">4</span>)</div></pre></td></tr></table></figure>
<p>下面是md写法<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a[<span class="number">20</span>][<span class="number">20</span>];</div></pre></td></tr></table></figure></p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">```c</div><div class="line">int a[<span class="number">20</span>][<span class="number">20</span>];</div><div class="line">```</div></pre></td></tr></table></figure>
<p>end</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结&lt;br&gt;blog目录下config&lt;br&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;figcaption&gt;&lt;span&gt;config配置&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;highlight:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    on:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;打开hexo默认高亮，则自定义高亮没用&lt;/p&gt;
&lt;p&gt;但是关闭之后始终使用不了spfk主题的高亮设置，遂放弃，有空再搞&lt;br&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/blog/"/>
    
      <category term="css" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>不使用图床博客po图片</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/09/29/test/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/09/29/test/</id>
    <published>2017-09-29T14:58:33.000Z</published>
    <updated>2017-10-17T01:28:37.312Z</updated>
    
    <content type="html"><![CDATA[<h4 id="方法一：github链接"><a href="#方法一：github链接" class="headerlink" title="方法一：github链接"></a>方法一：github链接</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://github.com/simonisacoder/Simon-s-house/tree/master/img/icon.jpg"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果如图,不行&lt;/br&gt;<br><img src="https://github.com/simonisacoder/Simon-s-house/tree/master/img/icon.jpg"></p>
<h4 id="方法二-同样是github链接，但是用md语法"><a href="#方法二-同样是github链接，但是用md语法" class="headerlink" title="方法二 同样是github链接，但是用md语法"></a>方法二 同样是github链接，但是用md语法</h4><a id="more"></a>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![](https://github.com/simonisacoder/Simon-s-house/tree/master/img/icon.jpg)</div></pre></td></tr></table></figure>
<p>效果如图  ，也不行<br>&lt;/br&gt;<br><img src="https://simonisacoder.github.io/img/icon.jpg" alt=""></p>
<p>两种方法都不行，还是hexo插件好</p>
<h4 id="方法三-hexo插件"><a href="#方法三-hexo插件" class="headerlink" title="方法三 hexo插件"></a>方法三 hexo插件</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;%asset_img icon.jpg%&#125;)</div></pre></td></tr></table></figure>
<p>前提：博客配置文件config.yml下面选true<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>文件目录<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">-post</span></div><div class="line">  -<span class="ruby">-<span class="number">2017</span>-09-test</span></div><div class="line">  -<span class="ruby">-<span class="number">2017</span>-09-test.md</span></div></pre></td></tr></table></figure></p>
<p>效果如图<br><img src="/Simon-s-house/2017/09/29/test/icon.jpg" alt="icon.jpg" title=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;方法一：github链接&quot;&gt;&lt;a href=&quot;#方法一：github链接&quot; class=&quot;headerlink&quot; title=&quot;方法一：github链接&quot;&gt;&lt;/a&gt;方法一：github链接&lt;/h4&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;https://github.com/simonisacoder/Simon-s-house/tree/master/img/icon.jpg&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如图,不行&amp;lt;/br&amp;gt;&lt;br&gt;&lt;img src=&quot;https://github.com/simonisacoder/Simon-s-house/tree/master/img/icon.jpg&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;方法二-同样是github链接，但是用md语法&quot;&gt;&lt;a href=&quot;#方法二-同样是github链接，但是用md语法&quot; class=&quot;headerlink&quot; title=&quot;方法二 同样是github链接，但是用md语法&quot;&gt;&lt;/a&gt;方法二 同样是github链接，但是用md语法&lt;/h4&gt;
    
    </summary>
    
    
      <category term="markdown" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/markdown/"/>
    
      <category term="blog" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>KNN算法及python问题</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/09/08/KNN%E7%AE%97%E6%B3%95%E5%8F%8Apython%E5%B0%8F%E8%AF%95%E2%80%9C/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/09/08/KNN算法及python小试“/</id>
    <published>2017-09-07T17:22:04.000Z</published>
    <updated>2017-10-14T09:11:02.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器学习实战之KNN"><a href="#机器学习实战之KNN" class="headerlink" title="机器学习实战之KNN"></a>机器学习实战之KNN</h1><h2 id="创造数据集"><a href="#创造数据集" class="headerlink" title="创造数据集"></a>创造数据集</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> operator</div><div class="line"><span class="keyword">def</span> createDataSet():</div><div class="line">	<span class="keyword">group</span> = array([[<span class="number">1.0</span>,<span class="number">1.1</span>],[<span class="number">1.0</span>,<span class="number">1.0</span>],[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0.1</span>]])</div><div class="line">	labels = [<span class="string">'A'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'B'</span>]</div><div class="line"><span class="keyword">return</span> <span class="keyword">group</span>,labels</div></pre></td></tr></table></figure>
<p>创造一个4*2的array，数值可理解为坐标，label就是对应分类<br><a id="more"></a></p>
<h2 id="python时间"><a href="#python时间" class="headerlink" title="python时间"></a>python时间</h2><h3 id="tile"><a href="#tile" class="headerlink" title="tile"></a>tile</h3><p>tile的作用是把一个矩阵复制出一个新的矩阵，如A是一个矩阵<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tile(<span class="keyword">A</span>,<span class="number">1</span>) = <span class="keyword">A</span></div><div class="line">tile（<span class="keyword">A</span>,<span class="number">2</span>,<span class="number">3</span>)就是把<span class="keyword">A</span>作为一个元素，复制成新的<span class="number">2</span>*<span class="number">3</span>的矩阵，每一个元素就是一个<span class="keyword">A</span></div></pre></td></tr></table></figure></p>
<h3 id="shape"><a href="#shape" class="headerlink" title="shape"></a>shape</h3><p>shape是获取矩阵的size的函数<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</div><div class="line">A.shape = (<span class="number">3</span>,<span class="number">3</span>)</div><div class="line">A.shape[<span class="number">0</span>] = A.shape[<span class="number">1</span>] = A.shape[<span class="number">2</span>] = <span class="number">3</span></div></pre></td></tr></table></figure></p>
<h3 id="argsort"><a href="#argsort" class="headerlink" title="argsort"></a>argsort</h3><p>argsort是一个排序后获取下标的函数<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">B = A.argsort() = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>]</div></pre></td></tr></table></figure></p>
<h3 id="itemgetter"><a href="#itemgetter" class="headerlink" title="itemgetter"></a>itemgetter</h3><p>itemgetter是operator的一个函数<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">b=operator.itemgetter(n<span class="number">-1</span>)</div><div class="line">b成为获取对象第n个元素的函数</div><div class="line">A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">b(A) = <span class="number">2</span></div></pre></td></tr></table></figure></p>
<h3 id="axis"><a href="#axis" class="headerlink" title="axis"></a>axis</h3><p>axis是表示矩阵的行列的<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>; <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</div><div class="line">axis默认为<span class="number">0</span>，表示列</div><div class="line">a.sum() = <span class="number">21</span></div><div class="line">a.sum(axis=<span class="number">0</span>) = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>] 列求和</div><div class="line">a.sum(axis=<span class="number">1</span>) = [<span class="number">6</span>,<span class="number">15</span>]  行求和</div></pre></td></tr></table></figure></p>
<h3 id="dict-get"><a href="#dict-get" class="headerlink" title="dict.get"></a>dict.get</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">python中的字典dict，获取对应值有两种方式</div><div class="line"><span class="number">1.</span> key2 = dict[key1] ,但是假如字典不存在key1会发生错误</div><div class="line"><span class="number">2.</span> key2 = dict.get(key1,<span class="section">default</span>) 当不存在key1，返回默认值<span class="section">default</span></div></pre></td></tr></table></figure>
<h2 id="完整代码及注释"><a href="#完整代码及注释" class="headerlink" title="完整代码及注释"></a>完整代码及注释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">py <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> operator</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDataSet</span><span class="params">()</span>:</span></div><div class="line">    group = array([[<span class="number">1.0</span>,<span class="number">1.1</span>],[<span class="number">1.0</span>,<span class="number">1.0</span>],[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0.1</span>]])</div><div class="line">    labels = [<span class="string">'A'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'B'</span>]</div><div class="line">    <span class="keyword">return</span> group,labels</div><div class="line"><span class="comment">#上面函数是根据已有的数据，创造数据集</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify0</span><span class="params">(inX,dataSet,labels,k)</span>:</span></div><div class="line">    <span class="comment">#inX是待分类的数据，dataSet是已知的数据集，labels是已知数据集的分类，k是算法抽取的最相邻点的数量</span></div><div class="line">    dataSetSize = dataSet.shape[<span class="number">0</span>]</div><div class="line">        <span class="comment">#获取dataSet的点的个数</span></div><div class="line">    diffMat = tile(inX,(dataSetSize,<span class="number">1</span>)) - dataSet</div><div class="line">        <span class="comment">#tile函数把待分类点组成一个n维向量，再和原有数据集每个点作差</span></div><div class="line">        <span class="comment">#相当于，得到(x-x1),(x-x2),(x-x3)···</span></div><div class="line">    sqDiffMat = diffMat ** <span class="number">2</span></div><div class="line">        <span class="comment">#(x-x1)^2 ···</span></div><div class="line">    sqDistances = sqDiffMat.sum(axis=<span class="number">1</span>)</div><div class="line">        <span class="comment">#各个维度的差的平方求和</span></div><div class="line">    distances = sqDistances ** <span class="number">0.5</span></div><div class="line">        <span class="comment">#和开方最终得到欧式距离</span></div><div class="line">    sortedDistIndicies = distances.argsort()</div><div class="line">        <span class="comment">#根据求得的距离进行排序，并得到对应的数据集的下标</span></div><div class="line">    classCount = &#123;&#125;</div><div class="line">        <span class="comment">#新建字典，放置距离小的数据的标签及其对应数量</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</div><div class="line">        <span class="comment">#放置距离小的前K个点</span></div><div class="line">        voteIlabel = labels[sortedDistIndicies[i]]</div><div class="line">            <span class="comment">#根据下标得到当前这个数据点的label</span></div><div class="line">        classCount[voteIlabel] = classCount.get(voteIlabel,<span class="number">0</span>) + <span class="number">1</span></div><div class="line">            <span class="comment">#字典中label对应值+1</span></div><div class="line">    sortedClassCount = sorted(classCount.iteritems(),key=operator.itemgetter(<span class="number">1</span>),reverse=<span class="keyword">True</span>)</div><div class="line">        <span class="comment">#根据字典的key2进行排序</span></div><div class="line">        sorted classCount</div><div class="line">    <span class="keyword">return</span> sortedClassCount[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line">        <span class="comment">#排序产生的是一个列表，列表的元素是一个tuple</span></div><div class="line">        <span class="comment">#返回出现最多的标签，也就是最终分类结果</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;机器学习实战之KNN&quot;&gt;&lt;a href=&quot;#机器学习实战之KNN&quot; class=&quot;headerlink&quot; title=&quot;机器学习实战之KNN&quot;&gt;&lt;/a&gt;机器学习实战之KNN&lt;/h1&gt;&lt;h2 id=&quot;创造数据集&quot;&gt;&lt;a href=&quot;#创造数据集&quot; class=&quot;headerlink&quot; title=&quot;创造数据集&quot;&gt;&lt;/a&gt;创造数据集&lt;/h2&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; operator&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; createDataSet():&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt; = array([[&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;]])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	labels = [&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;,labels&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创造一个4*2的array，数值可理解为坐标，label就是对应分类&lt;br&gt;
    
    </summary>
    
    
      <category term="program" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/program/"/>
    
      <category term="machine learning" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/machine-learning/"/>
    
      <category term="python" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>新学期半段计划</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/09/06/%E6%96%B0%E5%AD%A6%E6%9C%9F%E5%8D%8A%E6%AE%B5%E8%AE%A1%E5%88%92/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/09/06/新学期半段计划/</id>
    <published>2017-09-06T08:54:25.000Z</published>
    <updated>2017-09-06T09:39:12.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新学期展望"><a href="#新学期展望" class="headerlink" title="新学期展望"></a>新学期展望</h1><h2 id="回首大二"><a href="#回首大二" class="headerlink" title="回首大二"></a>回首大二</h2><p>&nbsp; &nbsp; &nbsp; &nbsp;首先,对大二的自己说声抱歉，因为整个大二基本处于不学无术的状态，尤其是两门通信课  ——  一门电磁波，一门通信原理，尤其是通信原理，以不喜欢为借口，理论和实验都不学。然后课外的辩论也没有做好，当然，没有付出就没有收获，绩点辩论双爆炸</p>
<a id="more"></a>
<h2 id="自满大一"><a href="#自满大一" class="headerlink" title="自满大一"></a>自满大一</h2><p>&nbsp; &nbsp; &nbsp; &nbsp;怀着大一对广州的期待和喜爱，从珠海转到广州，对一切的新鲜事物都感到适度的好奇，但更多的是对旧有人的怀念，刚开始就约出来吃饭啊玩啊。新鲜感褪去后，我大概是对自己大一的绩点从自信洋溢到了自满，开口闭口珠海图书馆好、校内环境好，落下了一个珠海校区“公主病”，紧接着以各种理由拒绝去图书馆——空调太冷，没有单人座位，厕所坏了···。自己定力又不足，在宿舍根本学习不进去。</p>
<h2 id="落魄通宵"><a href="#落魄通宵" class="headerlink" title="落魄通宵"></a>落魄通宵</h2><p>&nbsp; &nbsp; &nbsp; &nbsp;在大二两个学期的考试月，我都因为没有能够好好学习而吃进苦头，我躲在宿舍，又不自习，总是在网上看各种东西，也就是在大二上，我开始迷上了韩国的idol文化，了解到AOA、Gfriend、EXO、blackpink等一系列的韩国偶像团体，然后花很多时间去看他们的MV和综艺，记得大二上，我骗自己通宵学习，其实只是看综艺看到3、4点然后才开始复习一回，这样的结果是白天严重精力不足，效果可想而知。现在看来，可笑的是，我以为自己是真的爱上了韩国文化，开始跟风王钧学习韩语，事实上自己只是在逃避积压的一大堆不会的知识，结果现在韩语连拼读都还没入门，谈何“热爱”？</p>
<h2 id="展望大三"><a href="#展望大三" class="headerlink" title="展望大三"></a>展望大三</h2><p>&nbsp; &nbsp; &nbsp; &nbsp; 刚开学几天，自己状态还不错，反正反思了大二自己的状态，加上家里的状况，我要是还不回头，就真的是对不起自己，对不起家人和对不起同学。这样吧，现在先画个大饼，大三我要做的三件事情 ———— 刷绩点、搞实验室、学英语。这里解释一下搞实验室的意思，如无意外，我会自学机器学习，然后在王昌栋老师实验室，看能不能发paper，至少要进行点科研项目。为了保证自己不退缩，具体安排我都做好了，下面截图一下，监督自己。然后还有就是9月-12月，给自己每周安排两次算法学习，希望把基础和中等的算法都学完，同样，安排在下面贴出来。</p>
<p><img src="http://omefnguv1.bkt.clouddn.com/algorithm.PNG"><br><img src="http://omefnguv1.bkt.clouddn.com/ml.PNG" alt=""></p>
<h2 id="自我希冀"><a href="#自我希冀" class="headerlink" title="自我希冀"></a>自我希冀</h2><p>&nbsp; &nbsp; &nbsp; &nbsp; 从自己这几天的状态来看，我觉得中学时期的我要回来了，而且是有过之而无不及，为了完成一件事，无论怎么辛苦，都愿意投身进去，不完成，不睡觉，加油吧，Simon，You are coming back！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;新学期展望&quot;&gt;&lt;a href=&quot;#新学期展望&quot; class=&quot;headerlink&quot; title=&quot;新学期展望&quot;&gt;&lt;/a&gt;新学期展望&lt;/h1&gt;&lt;h2 id=&quot;回首大二&quot;&gt;&lt;a href=&quot;#回首大二&quot; class=&quot;headerlink&quot; title=&quot;回首大二&quot;&gt;&lt;/a&gt;回首大二&lt;/h2&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;首先,对大二的自己说声抱歉，因为整个大二基本处于不学无术的状态，尤其是两门通信课  ——  一门电磁波，一门通信原理，尤其是通信原理，以不喜欢为借口，理论和实验都不学。然后课外的辩论也没有做好，当然，没有付出就没有收获，绩点辩论双爆炸&lt;/p&gt;
    
    </summary>
    
    
      <category term="essay" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/essay/"/>
    
      <category term="program" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/program/"/>
    
  </entry>
  
  <entry>
    <title>atom捣鼓</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/05/14/atom%E6%8D%A3%E9%BC%93/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/05/14/atom捣鼓/</id>
    <published>2017-05-14T14:37:47.000Z</published>
    <updated>2017-09-05T15:29:46.701Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="program" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/program/"/>
    
      <category term="test" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>小议言论自由</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/04/08/%E5%B0%8F%E8%AE%AE%E8%A8%80%E8%AE%BA%E8%87%AA%E7%94%B1/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/04/08/小议言论自由/</id>
    <published>2017-04-08T10:58:48.000Z</published>
    <updated>2017-09-05T14:48:59.543Z</updated>
    
    <content type="html"><![CDATA[<p>作者：Jade Cheung<br>链接：<a href="https://www.zhihu.com/question/19797687/answer/15686250" target="_blank" rel="external">https://www.zhihu.com/question/19797687/answer/15686250</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<a id="more"></a>
<p>在我的理解中，言论自由包含两种自由：输出自由和输入自由。而参照柏林（Isaiah Berlin）的观点，自由又分积极自由和消极自由。于是两者相交叉，言论自由的内容便涵盖了四种自由，简称为说的自由，不说的自由；听的自由，不听的自由。    而人们往往只注重第一种言论自由，也就是说的自由，却忽视了另外三种自由。    先从说的自由说起。说的自由，也就是一般狭义上的言论自由。    言论自由作为自由的一种，必然具有自由的一般规定性。那么，什么是自由呢？从法学的意义上看，自由是按照自己的意愿，在一定边界内为或者不为某种行为的的权利。关于自由的边界，已经有了不少著述，最具有代表性的就是穆勒(J.S.Mill)在《论自由》中提出的观点（这本书严复先生翻译的版本书名很好，《群己权界论》，一针见血。）：    唯一实称其名的自由，乃是按照我们自己的道路去追求我们自己的好处的自由，只要我们不试图剥夺他人的这种自由，不试图阻碍他们取得这种自由的努力。 这一边界，重点在该自由会不会对他人造成直接而实质性的损害。用到言论自由上，就是该言论不会直接对他人造成实质性的伤害。所谓直接性就是:如果我骂你，你气死了，或者严谨点说，你心脏病发作死了，那么这就是直接的伤害，我对这一言论的发表的自由不受保护；而如果我说「这把刀真好用」，然后别人买了一把一样的刀去杀人，这就是间接的伤害，我对这一言论依然保有自由。所谓实质性就是：如果上面我骂的人没气死，只是不爽而已，那么就没有造成实质性的伤害。那么我还是可以骂你。    或许看起来有点诡异，但实际上，对自由的限制一般是用在对责任的裁量中的，也就是说如果这一行为被认为是正当的自由，那么就不会因此而承担责任。实际上，一个人要做什么事不是规范可以约束的，从法律的眼光看，对自由的规范更重要的是在行为发生后对责任的裁量问题，也就是「说了这句话，你要负什么责任」的问题。   值得注意的是，很多人会混淆穆勒的功利主义和一般的功利主义。一般的功利主义者可能会认为，即使一个人的言论不会对他人的权利和自由造成实质性伤害，但只要它对于社会弊大于利，就应该被窒息。而穆勒的功利主义却会认为，对一个人言论自由限制造成的影响的观照，不仅仅应该局限于短期的社会影响，更应该看到它对长远的人类福祉的影响：如果一个人利用自己的主观臆断判定他人的言论不当而窒息之，则社会便失去了聆听这一观点的机会，那么即使只有1%的机会这个言论是真理，人类也有可能因此而蒙受100%的损失；如果一个人的正当言论自由被窒息，那么会有更多的人的正当言论自由被出于各种借口被窒息，由此所有社会人的言论自由也会危在旦夕。    这一精神，用穆勒的原话来说就是：    如果整个人类，除一人之外，意见都一致，而只有那一个人持相反意见，人类也没有理由不让那个人说话。正如那个人一旦大权在握，也没有理由不让人类说话一样。    或者引用一句大家非常熟悉的伏尔泰的名言：     我可以不同意你的观点，但我誓死捍卫你说话的权利。    所以，即使是对社会会产生更多消极影响的正当言论，也因其作为一种自由所具有的神圣性而应受到保护，得以表达。    但是明显会造成实质性侵犯的言论就不一样了，比如霍姆斯(Oliver Wendell Holmes, Jr.)提出过的：对自由言论最严格的保护也不会允许在剧院里谎称失火造成恐慌。    这，就是说的自由的边界。    再来看不说的自由。不说的自由也被视为沉默权，最明显的表现就是美国警察逮捕某人时所说的《米兰达宣言》中的第一句话：你有权保持沉默。（You have the right to remain silent. ）    又或者美国宪法第五修正案中的内容：不得被强迫(人民)在任何刑事案件中自证其罪 (……nor shall be compelled in any criminal case to be a witness against himself)    正是因为人有不说的自由，所以刑讯逼供是一种不正当的行为。正如贝卡利亚在《论犯罪与刑罚》中提到的：……在痉挛和痛苦中讲真话并不那么自由，就像从前不依靠作弊而避免烈火与沸水的结局并不那么容易一样。我们意志的一切活动永远是同作为意志源泉的感受印象的强度对称的，而且每个人的感觉是有限的。因而，痛苦的影响可以增加到这种地步：它占据了人的整个感觉，给受折磨者留下的惟一自由只是选择眼前摆脱惩罚最短的捷径，这时候，犯人的这种回答是必然的，就像在火与水的考验中所出现的情况一样。有感性的无辜者以为认了罪就可以不受折磨，因而称自己为罪犯。    但是不说的自由也有其边界。当然，这里的说只是一个形象的说法，实际上指的是表达，所以和你能不能说话没什么关系。不表达的自由，在一定情况下也会受到一定限制，比如一个著名的例子：如果你所在的城市即将被炸药轰上天，而你们抓住了一个知道如何防止炸药被引爆的恐怖分子，你们要不要逼他说出拯救城市的办法？    当然还有其他种种边界，比如，先前的约定，常见的就是法庭上证人的Sworn testimony:I swear by Almighty God that I will tell the truth, the whole truth and nothing but the truth.    因此在法庭上，不能有所保留，必须说出所有的真相(the whole truth)    接下来是听的自由。这和说的自由是对应的，因为如果A的言论表达受阻，那么B对该言论的聆听权利也会受到侵犯。但因为听是一个被动的行为，而且产生影响的一方是自己，所以听的自由，边界并不明显，但受到侵犯的表现却很明显。如果从对方开始表达这一节点看起，对A说的自由的侵犯也是对B听的自由的侵犯，但是对A说的自由的边界限制并不会侵犯B听的自由，因为前者有前者的考量。对B听的自由的侵犯，往往是体现在对B输入言论的渠道的限制或阻塞上的。通俗一点解释，中国的GFW（墙）就是一种。   最后是经常被忽视的不听的自由。这一自由其实是很难得以保障的，以为一个人对言论的接受是一个被动的过程，如果你不知道A是你不想知道的东西，有时候你是不能在知道A之前知道这一点的。说起来有点绕，举个例子：假设你得了癌症而不自知，而你的想法是「就算我得了癌症我也不想知道这一点」。有一天，你去体检，体检结果出来，一看，自己得了癌症。这时候，你知道了自己不想知道的东西。    但是你能说医院侵犯了你不听的自由吗？不能。因为不听的自由有一条限制，就是你需要先声明你不想知道这一点，如果别人明知你不想知道还是告诉你，那么他就侵犯了你不听的权利。也因为这一事先声明往往不能预先做到，这一自由往往也不能保障。    很容易想到，这一自由在集权主义国家容易遭受侵犯，比如各种各样的洗脑教育。但有的时候我们不听的自由被侵犯了我们也不会知道，而且它也不能真被称为「侵犯」，毕竟我们并没有事先声明我们不想知道，因为我们还蒙在鼓里，不知道自己真正想要的是什么。比如赫胥黎的《美丽新世界》中描述的给儿童催眠，让他们对自己的阶级产生认同感的场景：　　主任沿着那一长排小床慢慢走去。八十个男女儿童舒坦地躺着，轻柔地呼吸着，面孔红红的，平静安详。每个枕头下都有轻柔的声音传来。主任停了脚步，在一张小床前弯下身子仔细倾听。　　“你说的是《阶级意识发凡》吗？我们把声音放大点试试看。”　　屋子尽头有一个扩音器伸出在墙上。主任走到它面前摁了摁按钮。　　“……都穿绿色，”一个柔和清晰的声音从句子中途开始，“而德尔塔儿童则穿咔叽。爱扑塞隆穿得更差一些。爱扑塞隆们太笨，学不会读书写字；他们穿黑色，那是很粗陋的颜色。我非常高兴我是个比塔。”　　停顿了片刻，那声音又开始了。　　“阿尔法儿童穿灰色。他们的工作要比我们辛苦得多，因为他们聪明得吓人。我因为自己是比塔而非常高兴，因为我用不着做那么辛苦的工作。何况我们也比伽玛们和德尔塔们要好得多。伽玛们都很愚蠢，他们全都穿绿衣服，德尔塔们穿咋叽衣服。啊，不，我不愿意跟德尔塔孩子们玩。爱扑塞隆就更糟糕了，太笨，他们学不会…”　　主任摁回了按钮，声音没有了。只有它的细弱的幽灵还在八十个枕头底下继续絮叨。　　“它醒来之前这些话还要为他们重复四十到五十遍；星期四，星期六还要重复。三十个月，每周三次，每次一百二十遍。然后接受高一级的课程。”    而我认为，对不听的自由的漠视，是一个社会真正的悲哀。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：Jade Cheung&lt;br&gt;链接：&lt;a href=&quot;https://www.zhihu.com/question/19797687/answer/15686250&quot;&gt;https://www.zhihu.com/question/19797687/answer/15686250&lt;/a&gt;&lt;br&gt;来源：知乎&lt;br&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;
    
    </summary>
    
    
      <category term="debate" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/debate/"/>
    
  </entry>
  
  <entry>
    <title>ICUT</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/03/28/ICUT/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/03/28/ICUT/</id>
    <published>2017-03-28T01:11:13.000Z</published>
    <updated>2017-09-05T15:00:12.636Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="essay" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/essay/"/>
    
      <category term="debate" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/debate/"/>
    
  </entry>
  
  <entry>
    <title>markdown pad</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/03/14/markdown-pad/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/03/14/markdown-pad/</id>
    <published>2017-03-14T14:05:29.000Z</published>
    <updated>2017-09-05T15:02:45.281Z</updated>
    
    <content type="html"><![CDATA[<h3 id="markdown-pad-快捷键"><a href="#markdown-pad-快捷键" class="headerlink" title="markdown pad 快捷键"></a>markdown pad 快捷键</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1996.</span> blabla可能会产生标签，</div><div class="line">正确方法应该时 <span class="number">1996</span>/.</div></pre></td></tr></table></figure>
<ol>
<li>ctrl+shift+o 有序列表</li>
<li>ctrl+1 一级标题</li>
<li>ctrl+2 二级标题</li>
<li>ctrl+u无序列表</li>
<li>ctrl+g 插入图片</li>
<li><p>ctrl+l 插入超链接</p>
</li>
<li><p>标签<br><br>1996. 没有标签<br><br></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;markdown-pad-快捷键&quot;&gt;&lt;a href=&quot;#markdown-pad-快捷键&quot; class=&quot;headerlink&quot; title=&quot;markdown pad 快捷键&quot;&gt;&lt;/a&gt;markdown pad 快捷键&lt;/h3&gt;&lt;figure class=&quot;hi
    
    </summary>
    
    
      <category term="program" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/program/"/>
    
  </entry>
  
  <entry>
    <title>motion analysis of CCC</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/03/07/motion-analysis-of-CCC/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/03/07/motion-analysis-of-CCC/</id>
    <published>2017-03-07T07:50:05.000Z</published>
    <updated>2017-03-07T11:41:06.509Z</updated>
    
    <content type="html"><![CDATA[<p>Motions of 2016 CCDC</p>
<ol>
<li>THBT all of China’s non-top university should only teach STEM courses (Science, Technology, Engineering and mathematics)<a id="more"></a>
( I didn’t realize the key point “China” until the debate finished. ~wu~wu~)<br>①According to feedback, we failed to answer the question that what’s the difference between top U &amp; non-top U and this makes the opp side keep attacking us that it will definitely cause inequality that those who want to study humanity subjects need to pay more effort than those who want to study STEM.<br>Solution: I just come up with an idea to rebut about the equality or fairness problem. I suddenly find out that it our policy doesn’t violate the fair principle because that fairness means that if people want to get the same interest, they need to pay the same cost regardless of their background or something else. But in the case, people want to learn STEM and people want to learn humanity have different goals and are chasing for different interests. To give an example, when the private schools increase their prices, is it unfair for those intend to study in private schools? The truth is that they are enjoying different services, and it is fair enough for them to pay different costs. The only differences is that the different cost now expands. And that’s we want to do, by expanding the cost difference, to encourage more students to study STEM and make more contribution to our country.</li>
</ol>
<p>②The opp side put forward an argument that an important mission of U is to teach students think about some ultimate question, who am I, where are we from, What is the meaning of life and so on, helping them develop fully instead of focus on some practical courses. And they think only humanity courses help students think about those question. Actually, I did react to this argument and rebut that to achieve full-development is not so to do with the courses the U set. Students are supposed to participate in more social activities or associations for the reason that it is those extracurricular activities help a student develop more fully instead of the courses set by U. From the judge’s perspective, my rebuttal only answers the second level of the question. And after the feedback, I was considering that what was the meaning of second level. Also, it was my first time to hear a judge analyzing an argument from different levels.<br>Self-reflection: Now I get it that the second level means that my rebuttal only explain how the U helps students achieve integrated development. But the first level is that whether U should teach students to think about those ultimate questions. Normally, when we want to do some things, the correct logic is: what is the “thing” -&gt; why we should do it -&gt; how to do it. So to give a more convincing rebuttal, I’d better admit that teaching students to think about those question is beneficial. But the fact is that not only those humanity courses help people to think about it but those STEM courses also help a lot. Physics helps us to figure out the question where are we from, astronomy makes us realize how tiny are we in the universe and makes us try to think about the status and role of human in the universe. Biology helps us know about the subtlety of creature and life, making us treasure our life. (But I still think it is not convincing enough because all subjects have their own unique function, meaning and significance which are irreplaceable).<br>③One of my argument is that the major contradiction we are facing is that the productive force is inconsistent with the productive relation. And the fact is that STEM courses favor improving our productive force a lot while those humanity subjects help adjust the productive relation. But I think I failed to prove that after we do that, our economy will develop enough and the major contradiction existing will be solved and finally achieve communism. That is our ultimate goal and at that time, people will not be bound from labor, making it possible to learn or do whatever they want or interested in.<br>So the policy is for a long-term consideration. So it seems that the judge didn’t buy my point. Another reason that the judge didn’t agree this point is that in our country, we also need a lot of lawyers who are considered people adjusting productive relation. And I failed to react to this. Now I am considering that, maybe I can explain that a considerable number of lawyers are dealing with some social problems which are exactly caused by the poor economy. So increasing the number of lawyers is just a palliative. And our policy is the cure.</p>
<pre><code>    ④ One argument raised up by my partner is that students majored in STEM have great advantage on jog hunting. So our policy helps students adapt to the market and meet the current need of market which is not only beneficial to individual but also the whole society. Anyway, the opp side point out that our policy will only worsen the situation because if all students go to study STEM, it will just cause an occupation jam because the number of graduate increase a lot while the need of market remains which do harm to the graduates. And I didn’t do a good job to protect it. I explain that the gov will have many other corresponding policies, such as encourage industry and scientific research to employ those graduates. But it seemed not so convincing. 
</code></pre><p>Motion 2. THW abolish all patent.<br>It was not only our first time to rank 1st but rank 1st as the lower house. From the judge’s feedback, he thought that we raised up a very important point about the time gap which means there is a time gap from an innovation appearing to it is copied. The time gap actually helps protect the innovator’s interest. The judge thought this point push the whole debate to a new angle.<br>But looking back at the debate, I think my argumentation can be promoted a lot.<br>①My partner raised up a new argument that knowledge is the property of the whole human and patent, as a kind of useful and beneficial knowledge even deserve more spreading. But the existence of patent actually hampers its spreading. Actually the upper house has already presented a similar opinion that it stops further innovation because anyone else want to promote it need to pay for the patent. So the best way for us to improve the argument is to consider this problem from the original innovator’s perspective. So I pointed out that patent not only do harm to other innovators but the original innovator himself. First, patent helps the innovator grasp the unique use of the innovation and make him make profit from if continuously which will reduce innovator’s incentive to improve or renovate his innovation. Because laziness is the nature of human being, since I can keep gaining profit from it, why do I bother myself to renovate it?  So the existence of patent brings an illusion to the innovator that he can forever enjoy the profit. But the market is fierce, when he is content with the status quo, others are still trying to invent something more advanced to seize the market and once they succeed, those original innovators’ dreams break. Anyway it’s too late to react when their products are already replaced in the market. So from a long term consideration, patent does not protect the innovator’s interest. Second, I pointed out that patent is not the best way to protect innovator’s interest. There are many cases that some company copy others’ patent and with better marketing strategy, they successfully seize the market and gain great profit from it. But their illegal cost which pay to the innovator is part of their interest. So combined with the time gap theory, we put forward a new solution that those innovators need to make full use of the time gap and cooperate with industrial field and seize the market in advance. Also, without the protection of patent, if they want to maintain their market shares, they need to keep doing further renovation to improve the competiveness of their products, eg higher quality, lower cost, more efficient productive way and so on. And these two aspect actually give rebuttal to the opp side who brings up that patent give more motivation and finance to the innovators. (I did a somehow dangerous thing that, in my argumentation, to prove the importance of further renovation I mentioned that the quality of innovation counts but not the number of innovation. )</p>
<p>②Based on the principle of free market, we need to point out that patent actually help the development of monopoly. The potential harm to the monopoly has been proved above. Then we need to show the tangible harm to the consumers, to the whole society. In a free market, fierce competition pushes all the producers keep improving their products, resulting in higher quality, lower cost of products. Bring material benefit to the consumers. </p>
<p>To sum up, if we successfully prove our policy bring benefit to innovator, consumer and result in more high-quality innovation in the whole society, we can win the debate.<br>Motion 3 : THW grant elites two votes. </p>
<p>Though you won the debate, but it was just because you had participated in the workshop.<br>——AngelicaKwan</p>
<pre><code>I need to admit that we did give some arguments based on the three essential components of democracy. But we still do not answer the problem why democracy is so important or make it more specific why one person one vote is so important.
</code></pre><p>It is a very difficult question. I tried to search some articles and did not find a satisfied answer. But during my thinking, I found out a problem that most of the gov’s arguments were just discussing about narrow voting ——vote for making decision. So they say that how wise the elites are, how much information they know, ect. And the fact is that in most of countries, decisions are actually made by elites. The only difference is that whether their power of making decision is empowered by people(public?). But I think “vote” in this motion should be a generalized one that voting is a basic right of a citizen who uses it to chase and protect his own interest, put it another way, it is about how to distribute social resources. So even though elites have more access to information and more well-educated, they are just making decision to protect their own interest. When their interest is consistent with normal people, it is reasonable for them to have one more vote. But the fact is that there are so many interest clashes between elites and normal people. So after figuring out the meaning of voting, I think that the motion is not so debatable because giving someone one more vote means we are giving him more right to chase his interest but it doesn’t make sense because we would only give more right to vulnerable group, affirmative action eg, instead of advantage groups who have already enjoyed more social resources. In a conclusion, if we can prove that the motivation of elites to vote is to chase their own interest and there will be interest clashes between elites and normal people and elites actually have already enjoyed more resources than normal people have, the debate would be easier for us.</p>
<p>And during my search, I found a relatively reasonable reason to explain the legitimacy of one person one vote. One of the functions of modern democracy is to guarantee equality and one person one vote is a form of political equality. When we build up our country, we stipulate some rights and obligation. We are living under the same legal system which means we are fulfilling the same obligation, so we deserve the same right, right of voting surely included. </p>
<p>Motion 4: THW ban the extraction and consumption of all fossil fuel.(oel,gas,coal,etc)</p>
<p>Personally, I don’t think this motion is fair for the gov side. Anyway what I learn from this debate is the cooperation between me and my partner. Because one of the most important arguments that to avoid those harm caused by fossil fuel is not ban using it but use it correctly. But from the feedback of Doris, this appeared in the 6min of my speech. Since it is a very important part of our case, we’d better raise it up as early as possible. Actually, I did remind my partner to put forward our case at the beginning of his speech but it seemed that he forgot to do so. And I was not so focusing on his speech so I didn’t put it forward at the very beginning of my speech either. So it is a problem of our strategy.<br>In this debate, I didn’t do a good job in time distribution. Because I didn’t elaborate enough to prove that even for a long-term consideration, banning the extraction and consumption of fossil fuel would not be a good choice. Because all the arguments raised by the gov side is for a long-term consideration, health, sustainability, environment or anything else. So my job should prove to the judge that our case is better that the policy of gov side even for a long-term consideration. So the gov side mentioned that we relied too much on fossil fuel but it is unrenewable and once they are run out it will be a disaster. To react to this, we need to point out that the status quo is that we have already realized the problem and we are making efforts to change the situation. But to achieve this transition, we need finance and technology support. Then we need to show that how fossil fuel influence our economy development that once we stop its extraction and consumption our economy will just collapse. As a result, we can not even survive. Let alone putting money and other resources into achieving the transition. Because without finance and technology support, all of their promise to achieve transition is just a beautiful lie which would not happen. So our case is that first we need to supervise the use of fossil fuel to avoid misuse and at the same time with the development of our economy we will give more support to the cleaner energy. And finally make our energy structure cleaner and more sustainable.<br>Anyway, except the problem of our cooperation, I think that we still did some good job. For example, I listed some data to show what role is fossil fuel playing in our society, 80% of electricity used in China is produced from burning coal and every year America imports 1/4 of total oil production in the world. And I tried to visualize the outcome of the policy from the angles of country, company, people’s daily life. </p>
<p>So I mark down some data in case next time I meet some realative motions.</p>
<p>With current consumption rate, our use of fossil fuel can last for<br>Petroleum: 45-50 years.<br>Natural gas: 50-60 years<br>Coal: 200-220 years.</p>
<p>Our(the whole world) energy structure currently:<br>Oil: 36%<br>Gas: 23%<br>Coal: 26%<br>Nuclear,solar,wind,hydrod 9%<br>Wood,others 6%</p>
<p>20 richest countries comsume:<br>50% of coal<br>80% of natural gas<br>65% of oil</p>
<p>Fossil fuel produces greehhouse gas:<br>3/4 sulfur dioxide<br>1/3 nitrogen dioxide<br>1/2 carbon dioxide</p>
<p>Motion 5: THR public figure openly recognize and propaganda herself as feminist (e.g.Hillary Clinton,TaylorSwift,Victoria Secrets’angels)<br>In this debate, we all admit the feminism is beneficial and something good. So the only clash comes to whether public figure recognizing and propaganda as feminist helps more people know about and understand feminism and finally achieve equality between male and female.<br>Though we succeeded in proving to the judge that how this works to achieve feminism. However, I think we forget an important part that we should emphasize why public figure is an important and even unique way to propaganda feminism. So we could state out the status quo that most of the women don’t have the interest to or access to read those professional books introducing feminism. But with the high exposure rate of public figure, it is easier for women to know about feminism. At least it is the most convenient and feasible way to propaganda feminism currently. So before we achieve equality between male and female, there is no reason to stop public figures from recognizing and propaganda themselves as feminists. </p>
<p>Motion 6: </p>
<p>TH would not accuse Felix of murder.</p>
<p>Though I didn’t participate in this debate, I have some opinions. </p>
<p>Actually I think there is a very important point that though Felix has lost his memory, whether he would admit his criminal act when he sees the evidence. If he believe what he did, we would accuse him of course. So I think that the motion should be debated based on the premise that Felix didn’t admit his act.</p>
<p>For gov side:<br>①We can focus on the rehabilitation of CJS that if Felix doesn’t remember he had committed a murder, punish him would not rehabilitate him but just cause hatred to the government on him.<br>②If Felix doesn’t believe what he had done but we still insist accusing him, from Felix’s perspective, it is just like he is wronged(冤枉) and even framed(陷害). And if the government can do this to him, why the government can not do so to others? Would it develop into a tool of tyranny? This point is somehow weird, but there are so few arguments for gov side.</p>
<p>For opp side:<br>①Punishment aims at illegal behavior. Unfortunately, behavior would not disappear because of the loss of memory and every behavior has its own executor which means if we want to punish this criminal act we can only punish Felix.<br>②If we don’t accuse Felix, it provides a possibility for others to avoid punishment. Assume that if one day there is a kind of drug which can remove someone’s memory, how should we deal with those criminal deliberately commit some crimes and then take the drugs. Also, it will increase the cost of law enforcement because if every criminal claims that he has lost his memory we could just examine them one by one before accuse them. Correspondingly, the increase of cost law enforcement means the decrease of cost of crime. So to a certain extent, goc’s case indirectly encourages crime.<br>③Respond to the gov’s case that Felix without memory should not be punished. We need to point out that his act is not a random case, his behavior roots from his mode of thinking and his reaction to the outside irritation which would not disappear with his loss of memory. It means if next time he comes across a similar situation, he is likely to do the same thing.<br>So that is our purpose to rehabilitate him. </p>
<p>We didn’t do a good job in elaboration in this debate. As a debate of IR, I think the main clash is whether regional cooperation is beneficial for the development of ASEAN countries. We only gave many titles that cooperation can build a free market, reduce customs, etc. But we didn’t explain how these can promote the development. Maybe we can elaborate it with the below aspects.</p>
<ol>
<li>A free market helps every production factor flows freely in the ASEAN countries. Then with the regulating effect of the market, those production factors will flow to the place where the productive efficiency is highest thus optimize the sources distribution in ASEAN countries. </li>
<li>The economic cooperation increases the industry scale which add their chips when negotiating with other countries.</li>
<li>With the economic relation, ASEAN countries will be tied together. It means once a county of them suffer from economic impact, others will also be damaged from it. So ASEAN countries will help each other to deal with outside impact. Since the economy of ASEAN increase because of union, with the bigger economy, their ability to tackle outside impact also increases.<br>4.Since they are tied together, they would also try to reduce inner conflict in order to achieve benefit maximization. </li>
</ol>
<p>Besides the economic cooperation, it seems that we can also put forward the military cooperation. How ASEAN unite together to fight against the threaten of bully(China?).</p>
<p>Motion 8: THBT Disney should make a princess with many lovers instead of one true love.</p>
<p>The whole debate is so chaotic. It is so difficult to write the self-reflection. So let’s just skip it!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Motions of 2016 CCDC&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;THBT all of China’s non-top university should only teach STEM courses (Science, Technology, Engineering and mathematics)
    
    </summary>
    
    
      <category term="debate" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/debate/"/>
    
  </entry>
  
  <entry>
    <title>markdown learning</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/03/06/markdown-learning/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/03/06/markdown-learning/</id>
    <published>2017-03-06T10:53:29.000Z</published>
    <updated>2017-03-07T09:09:14.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="markdown初养成"><a href="#markdown初养成" class="headerlink" title="markdown初养成"></a>markdown初养成</h2><blockquote>
<p>引用就是文本前面加 “&gt; ”（含空格不含引号）</p>
</blockquote>
<h3 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h3><p> <a href="http://baidu.com" target="_blank" rel="external">这是一个百度链接</a></p>
<h3 id="html插入图片法"><a href="#html插入图片法" class="headerlink" title="html插入图片法"></a>html插入图片法</h3><p> <img src="img/face.JPG" width="200" height="250"></p>
<blockquote>
<p>   这是第一段文字<br>   现在我来示范嵌套文字</p>
<blockquote>
<p>   这是被嵌套的文字</p>
</blockquote>
<p>　因为空格会被忽略，所以shift+space切换成全角模式再按space</p>
</blockquote>
<p> 1.这是一个无序列表（可用星号、加号减号后面接空格）</p>
<ul>
<li>F</li>
</ul>
<ul>
<li>U</li>
</ul>
<ul>
<li>C</li>
</ul>
<ul>
<li>K</li>
</ul>
<p>·.这是一个有序列表</p>
<ol>
<li>Mon </li>
<li>Tue </li>
<li>Wed</li>
<li>Thu</li>
<li>Fri</li>
<li>Sat</li>
<li>Sun</li>
</ol>
<p>·.多级目录</p>
<pre><code>1. 1
</code></pre><p><strong>这是一段粗体</strong></p>
<p><em>这是一段斜体</em></p>
<p><del>删除效果</del></p>
<blockquote>
<p>行内标记’我被强调了’</p>
<p>打符号要加斜杠\\,我是个星号*</p>
</blockquote>
<pre>
    For(;;)     
        cout << "This is a segment of fake code!";
</pre>

<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span> <span class="keyword">is</span> my code;</div><div class="line">Thanks!</div></pre></td></tr></table></figure>
<p>最后这是我的邮箱<a href="&#x6d;&#97;&#105;&#108;&#x74;&#111;&#58;&#57;&#50;&#x31;&#49;&#x38;&#49;&#53;&#x34;&#57;&#64;&#x71;&#x71;&#46;&#x63;&#111;&#109;">&#57;&#50;&#x31;&#49;&#x38;&#49;&#53;&#x34;&#57;&#64;&#x71;&#x71;&#46;&#x63;&#111;&#109;</a></p>
<hr>
<h2 id="可爱的分割线"><a href="#可爱的分割线" class="headerlink" title="可爱的分割线"></a>可爱的分割线</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;markdown初养成&quot;&gt;&lt;a href=&quot;#markdown初养成&quot; class=&quot;headerlink&quot; title=&quot;markdown初养成&quot;&gt;&lt;/a&gt;markdown初养成&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;引用就是文本前面加 “&amp;gt; ”（含空格
    
    </summary>
    
    
      <category term="program" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/program/"/>
    
  </entry>
  
  <entry>
    <title>markdown进阶</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/03/06/markdown%E8%BF%9B%E9%98%B6/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/03/06/markdown进阶/</id>
    <published>2017-03-06T10:53:29.000Z</published>
    <updated>2017-03-07T11:41:20.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="markdown进阶"><a href="#markdown进阶" class="headerlink" title="markdown进阶"></a>markdown进阶</h2><blockquote>
<p>引用就是文本前面加 “&gt; ”（含空格不含引号）</p>
</blockquote>
<h3 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h3><p> <a href="http://baidu.com" target="_blank" rel="external">这是一个百度链接</a></p>
<blockquote>
<p>   这是第一段文字<br>   现在我来示范嵌套文字</p>
<blockquote>
<p>   这是被嵌套的文字</p>
</blockquote>
<p>　因为空格会被忽略，所以shift+space切换成全角模式再按space</p>
</blockquote>
<a id="more"></a>
<p> 1.这是一个无序列表（可用星号、加号减号后面接空格）</p>
<ul>
<li>F</li>
</ul>
<ul>
<li>U</li>
</ul>
<ul>
<li>C</li>
</ul>
<ul>
<li>K</li>
</ul>
<p>·.这是一个有序列表</p>
<ol>
<li>Mon </li>
<li>Tue </li>
<li>Wed</li>
<li>Thu</li>
<li>Fri</li>
<li>Sat</li>
<li>Sun</li>
</ol>
<p>·.多级目录</p>
<pre><code>1. 1
</code></pre><p><strong>这是一段粗体</strong></p>
<p><em>这是一段斜体</em></p>
<p><del>删除效果</del></p>
<blockquote>
<p>行内标记’我被强调了’</p>
<p>打符号要加斜杠\\,我是个星号*</p>
</blockquote>
<h3 id="插入图片语法-不推荐，不能设置大小"><a href="#插入图片语法-不推荐，不能设置大小" class="headerlink" title="插入图片语法(不推荐，不能设置大小)"></a>插入图片语法(不推荐，不能设置大小)</h3><p> <img src="img/week2.PNG" alt="五环!"></p>
<pre>
    For(;;)     
        cout << "This is a segment of fake code!";
</pre>

<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span> <span class="keyword">is</span> my code;</div><div class="line">Thanks!</div></pre></td></tr></table></figure>
<p>最后这是我的邮箱<a href="&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#x39;&#50;&#49;&#x31;&#x38;&#49;&#53;&#52;&#57;&#x40;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;">&#x39;&#50;&#49;&#x31;&#x38;&#49;&#53;&#52;&#57;&#x40;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;</a></p>
<hr>
<h2 id="可爱的分割线"><a href="#可爱的分割线" class="headerlink" title="可爱的分割线"></a>可爱的分割线</h2><hr>
<p>title: markdown进阶<br>date: 2017-03-07 00:11:02</p>
<h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;markdown进阶&quot;&gt;&lt;a href=&quot;#markdown进阶&quot; class=&quot;headerlink&quot; title=&quot;markdown进阶&quot;&gt;&lt;/a&gt;markdown进阶&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;引用就是文本前面加 “&amp;gt; ”（含空格不含引号）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;插入链接&quot;&gt;&lt;a href=&quot;#插入链接&quot; class=&quot;headerlink&quot; title=&quot;插入链接&quot;&gt;&lt;/a&gt;插入链接&lt;/h3&gt;&lt;p&gt; &lt;a href=&quot;http://baidu.com&quot;&gt;这是一个百度链接&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;   这是第一段文字&lt;br&gt;   现在我来示范嵌套文字&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;   这是被嵌套的文字&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　因为空格会被忽略，所以shift+space切换成全角模式再按space&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="program" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/program/"/>
    
      <category term="markdown" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>I am tired of building this!</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/03/05/I-am-tired-of-building-this/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/03/05/I-am-tired-of-building-this/</id>
    <published>2017-03-05T03:35:54.000Z</published>
    <updated>2017-03-07T07:48:43.121Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="essay" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>Simon is very angry!</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/03/05/Simon-is-very-angry/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/03/05/Simon-is-very-angry/</id>
    <published>2017-03-05T02:12:21.000Z</published>
    <updated>2017-03-07T07:48:34.537Z</updated>
    
    <content type="html"><![CDATA[<p>Fuck，I have wasted a lot of time to build this personal blog and i still can not succeed! Why!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Fuck，I have wasted a lot of time to build this personal blog and i still can not succeed! Why!&lt;/p&gt;

    
    </summary>
    
    
      <category term="essay" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>Simon&#39;s new personal blog</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/03/05/Simon-s-new-personal-blog/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/03/05/Simon-s-new-personal-blog/</id>
    <published>2017-03-05T01:59:08.000Z</published>
    <updated>2017-03-05T01:59:08.498Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Simon&#39;s personal blog</title>
    <link href="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/03/04/Simon-s-personal-blog/"/>
    <id>https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/2017/03/04/Simon-s-personal-blog/</id>
    <published>2017-03-04T12:28:49.000Z</published>
    <updated>2017-03-07T05:15:15.054Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/simonisacoder/Simon-s-house.git/Simon-s-house/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
